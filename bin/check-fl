#!/usr/bin/env python
import argparse
import os
import sys

try:
    import torch
except ImportError:
    pass

import numpy as np

from flavor.cook.utils import IsSetEvent

os.environ["PYTHONWARNINGS"] = "ignore"


def transfer_data_to_tensor(batch):

    if isinstance(batch, (list, tuple, dict)):
        pass
    elif isinstance(batch, np.ndarray):
        return batch
    elif "torch" in sys.modules and isinstance(batch, torch.Tensor):
        return batch
    else:
        raise TypeError("Not supporting data type {}".format(type(batch)))

    # when list
    if isinstance(batch, list):
        for i, x in enumerate(batch):
            batch[i] = transfer_data_to_tensor(x)
        return batch

    # when tuple
    if isinstance(batch, tuple):
        batch = list(batch)
        for i, x in enumerate(batch):
            batch[i] = transfer_data_to_tensor(x)
        return tuple(batch)

    # when dict
    if isinstance(batch, dict):
        for k, v in batch.items():
            batch[k] = transfer_data_to_tensor(v)

        return batch

    return batch


def load_checkpoint(path):
    try:
        return torch.load(path)
    except RuntimeError:
        import pickle

        with open(path, "rb") as f:
            ckpt = pickle.load(f)
        return transfer_data_to_tensor(ckpt)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--main", type=str, required=True, help="main process command")
    parser.add_argument(
        "-p", "--preprocess", type=str, help="data preprocess command", default=None
    )
    parser.add_argument(
        "--ignore-ckpt",
        action="store_true",
        help="ignore ckpt check for 3rd party aggregator",
        default=False,
    )
    args, unparsed = parser.parse_known_args()

    input_path_default = os.getenv("INPUT_PATH", "/data")
    output_path_default = os.getenv("OUTPUT_PATH", "/output")
    local_path_default = os.getenv("LOCAL_MODEL_PATH", "/weight/local.ckpt")
    global_path_default = os.getenv("GLOBAL_MODEL_PATH", "/weight/global.ckpt")
    log_path_default = os.getenv("LOG_PATH", "/log")

    input_path = input(
        "Set $INPUT_PATH: (Press ENTER if using default env - {})".format(input_path_default)
    )
    os.environ["INPUT_PATH"] = input_path if input_path else input_path_default
    output_path = input(
        "Set $OUTPUT_PATH: (Press ENTER if using default env - {})".format(output_path_default)
    )
    os.environ["OUTPUT_PATH"] = output_path if output_path else output_path_default
    local_path = input(
        "Set $LOCAL_MODEL_PATH: (Press ENTER if using default env - {})".format(local_path_default)
    )
    os.environ["LOCAL_MODEL_PATH"] = local_path if local_path else local_path_default
    global_path = input(
        "Set $GLOBAL_MODEL_PATH: (Press ENTER if using default env - {})".format(
            global_path_default
        )
    )
    os.environ["GLOBAL_MODEL_PATH"] = global_path if global_path else global_path_default
    log_path = input(
        "Set $LOG_PATH: (Press ENTER if using default env - {})".format(log_path_default)
    )
    os.environ["LOG_PATH"] = log_path if log_path else log_path_default

    os.environ["SCHEMA_PATH"] = os.path.join(
        os.path.dirname(os.path.realpath(__file__)), "../schema/FLresult.json"
    )

    os.makedirs(os.environ["LOG_PATH"], exist_ok=True)
    os.makedirs(os.environ["OUTPUT_PATH"], exist_ok=True)
    os.makedirs(os.path.dirname(os.environ["LOCAL_MODEL_PATH"]), exist_ok=True)

    from flavor.cook.servicer import EdgeAppServicer

    app_service = EdgeAppServicer(mainProcess=args.main, preProcess=args.preprocess, debugMode=True)

    states = ["DataValidate", "TrainInit", "LocalTrain", "TrainFinish"]

    for state in states:
        getattr(app_service, state)({}, {})
        if IsSetEvent("Error"):
            raise Exception
            os._exit(os.EX_OK)

    if IsSetEvent("TrainStarted"):
        raise AssertionError("TrainStarted event should be cleared")

    if not args.ignore_ckpt:
        print("Check Checkpoint")
        ckpt = load_checkpoint(os.environ["LOCAL_MODEL_PATH"])
        if "state_dict" not in ckpt:
            raise KeyError("state_dict not in checkpoint")
    else:
        if not os.path.exists(os.environ["LOCAL_MODEL_PATH"]):
            raise FileNotFoundError("Local model is not exist")
        print("Skip Checkpoint Checking")

    print("Run Successfullly !!!")


if __name__ == "__main__":

    main()
