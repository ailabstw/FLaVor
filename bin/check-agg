#!/usr/bin/env python
import argparse
import json
import os
import shutil

from flavor.cook.utils import IsSetEvent

os.environ["PYTHONWARNINGS"] = "ignore"
os.environ["LOGLEVEL"] = "ERROR"
os.environ["FLAVOR"] = "true"
os.environ["CHECK_AGG"] = "true"


def set_env_var(key, default, force_default=False):
    if force_default:
        os.environ[key] = default
    else:
        os.environ[key] = (
            input(f"Set ${key} (Press ENTER if using default env - {default}): ") or default
        )


def check_and_handle_error(apps):
    if IsSetEvent("Error"):

        for app in apps:
            app.close_process()

        raise Exception("Refer to ERROR log message")

        os._exit(os.EX_OK)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--main", type=str, required=True, help="main process command")
    parser.add_argument("-e", "--epochs", type=int, default=1, help="epoch num to test")
    parser.add_argument(
        "--init-once", action="store_true", help="Initialize aggregator just once", default=False
    )
    parser.add_argument(
        "-cm", "--client-main", type=str, required=True, help="client main process command"
    )
    parser.add_argument(
        "-cp", "--client-preprocess", type=str, help="client data preprocess command", default=None
    )
    parser.add_argument("-y", "--yes", action="store_true", help="skip setting env", default=False)
    args, unparsed = parser.parse_known_args()

    force_default = args.yes
    set_env_var("INPUT_PATH", os.getenv("INPUT_PATH", "/data"), force_default)
    set_env_var("OUTPUT_PATH", os.getenv("OUTPUT_PATH", "/output"), force_default)
    set_env_var(
        "LOCAL_MODEL_PATH", os.getenv("LOCAL_MODEL_PATH", "/weight/local.ckpt"), force_default
    )
    set_env_var(
        "GLOBAL_MODEL_PATH", os.getenv("GLOBAL_MODEL_PATH", "/weight/global.ckpt"), force_default
    )
    set_env_var("LOG_PATH", os.getenv("LOG_PATH", "/log"), force_default)

    os.environ["SCHEMA_PATH"] = os.path.join(
        os.path.dirname(os.path.realpath(__file__)), "../schema/FLresult.json"
    )
    os.environ["REPO_ROOT"] = os.path.dirname(os.environ["LOCAL_MODEL_PATH"])

    os.makedirs(os.environ["LOG_PATH"], exist_ok=True)
    os.makedirs(os.environ["OUTPUT_PATH"], exist_ok=True)
    os.makedirs(os.path.dirname(os.environ["LOCAL_MODEL_PATH"]), exist_ok=True)

    if os.path.exists(os.environ["GLOBAL_MODEL_PATH"]):
        os.remove(os.environ["GLOBAL_MODEL_PATH"])
    os.makedirs(os.path.dirname(os.environ["GLOBAL_MODEL_PATH"]), exist_ok=True)

    from flavor.cook.app import AggregatorApp, EdgeApp
    from flavor.cook.model import AggregateRequest

    edge_app = EdgeApp(
        mainProcess=args.client_main, preProcess=args.client_preprocess, debugMode=True
    )
    aggregator_app = AggregatorApp(mainProcess=args.main, init_once=args.init_once, debugMode=True)

    for state in ["data_validate", "train_init"]:
        getattr(edge_app, state)({})
        check_and_handle_error([edge_app, aggregator_app])

    for epoch in range(args.epochs + 1):

        getattr(edge_app, "local_train")({})
        check_and_handle_error([edge_app, aggregator_app])

        if epoch == args.epochs:
            break

        shutil.move(
            os.environ["LOCAL_MODEL_PATH"], os.path.join(os.environ["REPO_ROOT"], "weights.ckpt")
        )
        shutil.move(
            os.path.join(os.path.dirname(os.environ["LOCAL_MODEL_PATH"]), "info.json"),
            os.path.join(os.environ["REPO_ROOT"], "info.json"),
        )

        request = {"LocalModels": [{"path": ""}], "AggregatedModel": {"path": ""}}
        with open(
            os.path.join(os.path.dirname(os.environ["LOCAL_MODEL_PATH"]), "info.json")
        ) as json_file:
            info = json.load(json_file)
        request["LocalModels"][0].update(info)

        getattr(aggregator_app, "aggregate")(AggregateRequest(**request))
        check_and_handle_error([edge_app, aggregator_app])

        shutil.move(
            os.path.join(os.environ["REPO_ROOT"], "merged.ckpt"), os.environ["GLOBAL_MODEL_PATH"]
        )
        shutil.move(
            os.path.join(os.environ["REPO_ROOT"], "merged-info.json"),
            os.path.join(os.path.dirname(os.environ["GLOBAL_MODEL_PATH"]), "merged-info.json"),
        )

    getattr(edge_app, "train_finish")({})
    check_and_handle_error([edge_app, aggregator_app])

    getattr(aggregator_app, "train_finish")({})
    check_and_handle_error([edge_app, aggregator_app])

    edge_app.close_process()
    aggregator_app.close_process()

    print("Run Successfullly !!!")


if __name__ == "__main__":

    main()
