#!/usr/bin/env python
import argparse
import os
import shutil

from flavor.cook.service_pb2 import AggregateParams
from flavor.cook.utils import IsSetEvent

os.environ["PYTHONWARNINGS"] = "ignore"
os.environ["LOGLEVEL"] = "ERROR"


def parse_list(values, message):
    if isinstance(values[0], dict):
        for v in values:
            cmd = message.add()
            parse_dict(v, cmd)
    else:
        message.extend(values)


def parse_dict(values, message):
    for k, v in values.items():
        if isinstance(v, dict):
            parse_dict(v, getattr(message, k))
        elif isinstance(v, list):
            parse_list(v, getattr(message, k))
        else:
            setattr(message, k, v)


def dict_to_protobuf(value, message):
    parse_dict(value, message)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--main", type=str, required=True, help="main process command")
    parser.add_argument("-e", "--epochs", type=int, default=1, help="epoch num to test")
    parser.add_argument(
        "--init-once", action="store_true", help="Initialize aggregator just once", default=False
    )
    parser.add_argument(
        "-cm", "--client-main", type=str, required=True, help="client main process command"
    )
    parser.add_argument(
        "-cp", "--client-preprocess", type=str, help="client data preprocess command", default=None
    )
    args, unparsed = parser.parse_known_args()

    input_path_default = os.getenv("INPUT_PATH", "/data")
    output_path_default = os.getenv("OUTPUT_PATH", "/output")
    local_path_default = os.getenv("LOCAL_MODEL_PATH", "/weight/local.ckpt")
    global_path_default = os.getenv("GLOBAL_MODEL_PATH", "/weight/global.ckpt")
    log_path_default = os.getenv("LOG_PATH", "/log")

    input_path = input(
        "Set $INPUT_PATH: (Press ENTER if using default env - {})".format(input_path_default)
    )
    os.environ["INPUT_PATH"] = input_path if input_path else input_path_default
    output_path = input(
        "Set $OUTPUT_PATH: (Press ENTER if using default env - {})".format(output_path_default)
    )
    os.environ["OUTPUT_PATH"] = output_path if output_path else output_path_default
    local_path = input(
        "Set $LOCAL_MODEL_PATH: (Press ENTER if using default env - {})".format(local_path_default)
    )
    os.environ["LOCAL_MODEL_PATH"] = local_path if local_path else local_path_default
    global_path = input(
        "Set $GLOBAL_MODEL_PATH: (Press ENTER if using default env - {})".format(
            global_path_default
        )
    )
    os.environ["GLOBAL_MODEL_PATH"] = global_path if global_path else global_path_default
    log_path = input(
        "Set $LOG_PATH: (Press ENTER if using default env - {})".format(log_path_default)
    )
    os.environ["LOG_PATH"] = log_path if log_path else log_path_default
    os.environ["SCHEMA_PATH"] = os.path.join(
        os.path.dirname(os.path.realpath(__file__)), "../schema/FLresult.json"
    )
    os.environ["REPO_ROOT"] = os.path.dirname(os.environ["LOCAL_MODEL_PATH"])

    os.makedirs(os.environ["LOG_PATH"], exist_ok=True)
    os.makedirs(os.environ["OUTPUT_PATH"], exist_ok=True)
    os.makedirs(os.path.dirname(os.environ["LOCAL_MODEL_PATH"]), exist_ok=True)

    if os.path.exists(os.environ["GLOBAL_MODEL_PATH"]):
        os.remove(os.environ["GLOBAL_MODEL_PATH"])
    os.makedirs(os.path.dirname(os.environ["GLOBAL_MODEL_PATH"]), exist_ok=True)

    from flavor.cook.servicer import AggregateServerAppServicer, EdgeAppServicer

    edge_service = EdgeAppServicer(
        mainProcess=args.client_main, preProcess=args.client_preprocess, debugMode=True
    )
    agg_service = AggregateServerAppServicer(
        mainProcess=args.main, init_once=args.init_once, debugMode=True
    )
    for state in ["DataValidate", "TrainInit"]:
        getattr(edge_service, state)({}, {})
        if IsSetEvent("Error"):
            raise Exception
            os._exit(os.EX_OK)

    for epoch in range(args.epochs + 1):

        for state in ["LocalTrain"]:
            getattr(edge_service, state)({}, {})
            if IsSetEvent("Error"):
                raise Exception
                os._exit(os.EX_OK)

        if epoch == args.epochs:
            break

        shutil.move(
            os.environ["LOCAL_MODEL_PATH"], os.path.join(os.environ["REPO_ROOT"], "weights.ckpt")
        )

        request = AggregateParams()
        dict_to_protobuf({"localModels": [{"path": ""}], "AggregatedModel": {"path": ""}}, request)

        for state in ["Aggregate"]:
            getattr(agg_service, state)(request, {})
            if IsSetEvent("Error"):
                raise Exception
                os._exit(os.EX_OK)

        shutil.move(
            os.path.join(os.environ["REPO_ROOT"], "merged.ckpt"), os.environ["GLOBAL_MODEL_PATH"]
        )

    for state in ["TrainFinish"]:
        getattr(edge_service, state)({}, {})
        if IsSetEvent("Error"):
            raise Exception
            os._exit(os.EX_OK)

    for state in ["TrainFinish"]:
        getattr(agg_service, state)({}, {})
        if IsSetEvent("Error"):
            raise Exception
            os._exit(os.EX_OK)

    print("Run Successfullly !!!")


if __name__ == "__main__":

    main()
